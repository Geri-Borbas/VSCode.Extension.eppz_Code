{
	"name": "eppz! Code (regions.namespace.declaration)",
	"author": "Borbás Geri",
	"comment": "Created by Borbás Geri (https://twitter.com/_eppz) © 2017 Creative Commons 4.0 BY-NC",
	"include": "eppz-code.regions.attribute.json",
	"settings":
	[


	// Text.

		{
			"name": "Source",
			"scope": [ "source regions.namespace.declaration" ],
			"settings": { "foreground": "#74a8af" }
		},
		{
			"name": "Keyword (operator)",
			"scope": [ "regions.namespace.declaration keyword.operator" ],
			"settings": { "foreground": "#628e95" }
		},
		{
			"name": "Punctuation",
			"scope": [ "regions.namespace.declaration punctuation" ],
			"settings": { "foreground": "#537a81" }
		},
		{
			"name": "Punctuation (parenthesis)",
			"scope": [ "regions.namespace.declaration punctuation.parenthesis" ],
			"settings": { "foreground": "#486a71" }
		},
		{
			"name": "Punctuation (square bracket)",
			"scope": [ "regions.namespace.declaration punctuation.squarebracket" ],
			"settings": { "foreground": "#3e5c63" }
		},
		{
			"name": "Punctuation (curly brace)",
			"scope": [ "regions.namespace.declaration punctuation.curlybrace" ],
			"settings": { "foreground": "#375159" }
		},
		{
			"name": "Comment",
			"scope":
			[
				"regions.namespace.declaration comment",
				"regions.namespace.declaration comment punctuation",
				"regions.namespace.declaration comment punctuation.parenthesis",
				"regions.namespace.declaration comment punctuation.squarebracket",
			 	"regions.namespace.declaration comment punctuation.curlybrace",
				"regions.namespace.declaration comment keyword",
				"regions.namespace.declaration comment entity",
				"regions.namespace.declaration comment variable",
				"regions.namespace.declaration comment string"
			],
			"settings": { "foreground": "#44515a" }
		},


	// Literals.

		{
			"name": "Literals (constant)",
			"scope": [ "regions.namespace.declaration constant" ],
			"settings": { "foreground": "#456997" }
		},
		{
			"name": "Literals (null)",
			"scope": [ "regions.namespace.declaration constant.language.null" ],
			"settings": { "foreground": "#456997" }
		},
		{
			"name": "Literals (Numeric)",
			"scope": [ "regions.namespace.declaration constant.numeric" ],
			"settings": { "foreground": "#457897" }
		},
		{
			"name": "Literals (String)",
			"scope":
			[
				"regions.namespace.declaration string.quoted.double",
				"regions.namespace.declaration string.quoted.double punctuation"
			],
			"settings": { "foreground": "#458897" }
		},
		{
			"name": "Literals (Escape)",
			"scope": [ "regions.namespace.declaration constant.character.escape" ],
			"settings": { "foreground": "#458897" }
		},
		{
			"name": "Literals (Char)",
			"scope":
			[
				"regions.namespace.declaration string.quoted.single",
				"regions.namespace.declaration string.quoted.single punctuation"
			],
			"settings": { "foreground": "#448d8d" }
		},


	// Functions.

		{
			"name": "Functions",
			"scope":
			[
				"regions.namespace.declaration entity.name.function",
				"regions.namespace.declaration entity.name.method",
				"regions.namespace.declaration keyword.other.get",
				"regions.namespace.declaration keyword.other.set",				
				"regions.namespace.declaration keyword.other.add",				
				"regions.namespace.declaration keyword.other.remove"			
			],
			"settings": { "foreground": "#366f68" }
		},


	// Functions (support).

		{
			"name": "Functions (UnityEngine)",
			"scope": [ "regions.namespace.declaration support.function.UnityEngine" ],
			"settings": { "foreground": "#366f68" }
		},
		{
			"name": "Functions (UnityEditor)",
			"scope": [ "regions.namespace.declaration support.function.UnityEditor" ],
			"settings": { "foreground": "#366f68" }
		},
		{
			"name": "Functions (System)",
			"scope": [ "regions.namespace.declaration support.function.System" ],
			"settings": { "foreground": "#366f68" }
		},


	// Types.

		{
			"name": "Types",
			"regions.namespace.declaration comment": "Including classes, delegates, enums, interfaces, structs.",
			"scope":
			[
				"regions.namespace.declaration storage.type",
				"regions.namespace.declaration entity.name.type.type-parameter"
			],
			"settings": { "foreground": "#6c9b87" }
		},
		{
			"name": "Types (built-in)",
			"scope": [ "regions.namespace.declaration keyword.type" ],
			"settings": { "foreground": "#6c9b87" }
		},
		{
			"name": "Types (<>)",
			"scope": [ "regions.namespace.declaration punctuation.definition.typeparameters" ],
			"settings": { "foreground": "#6c9b87" }
		},


	// Types (support).

		{
			"name": "Types (UnityEngine)",
			"scope": [ "regions.namespace.declaration support.type.UnityEngine" ],
			"settings": { "foreground": "#6c9b87" }
		},
		{
			"name": "Types (UnityEditor)",
			"scope": [ "regions.namespace.declaration support.type.UnityEditor" ],
			"settings": { "foreground": "#6c9b87" }
		},
		{
			"name": "Types (System)",
			"scope": [ "regions.namespace.declaration support.type.System" ],
			"settings": { "foreground": "#6c9b87" }
		},


	// Modifiers.

		{
			"name": "Moifiers",
			"scope": [ "regions.namespace.declaration storage.modifier" ],
			"settings": { "foreground": "#6c9b87" }
		},


	// Types (declarations).

		{
			"name": "Types (declarations)",
			"regions.namespace.declaration comment": "Including classes, delegates, enums, interfaces, structs.",
			"scope": [ "regions.namespace.declaration entity.name.type" ],
			"settings": { "foreground": "#6e9778" }
		},


	// Keywords.

		{
			"name": "Keywords",
			"scope":
			[
				"regions.namespace.declaration keyword.control",
				"regions.namespace.declaration keyword.operator.conditional",
				"regions.namespace.declaration keyword.query"
			],
			"settings": { "foreground": "#637f78" }
		},
		{
			"name": "Keywords (other)",
			"scope": [ "regions.namespace.declaration keyword.other" ],
			"settings": { "foreground": "#637f78" }
		},


	// Preprocessor.

		{
			"name": "Preprocessor",
			"scope":
			[
				"regions.namespace.declaration meta.preprocessor",
				"regions.namespace.declaration meta.preprocessor punctuation",
				"regions.namespace.declaration meta.preprocessor punctuation.parenthesis",
				"regions.namespace.declaration meta.preprocessor punctuation.squarebracket",
			 	"regions.namespace.declaration meta.preprocessor punctuation.curlybrace",
				"regions.namespace.declaration meta.preprocessor keyword"
			],
			"settings": { "foreground": "#9e8277" }
		},
		{
			"name": "Preprocessor (entities)",
			"scope":
			[
				"regions.namespace.declaration meta.preprocessor entity",
				"regions.namespace.declaration meta.preprocessor entity.name.method",				
				"regions.namespace.declaration meta.preprocessor entity.name.function",				
				"regions.namespace.declaration meta.preprocessor entity.name.variable",
				"regions.namespace.declaration meta.preprocessor variable",
				"regions.namespace.declaration meta.preprocessor string"
			],
			"settings": { "foreground": "#9e8277" }
		},


	// Variables.

		{
			"name": "Variables",
			"scope":
			[
				"regions.namespace.declaration variable.other.readwrite",
				"regions.namespace.declaration variable.other.object",
				"regions.namespace.declaration variable.other.alias",
				"regions.namespace.declaration entity.name.variable",
				"regions.namespace.declaration keyword.other.base",
				"regions.namespace.declaration keyword.other.this"		
			],
			"settings": { "foreground": "#716b6e" }
		},
		{
			"name": "Variables (local)",
			"scope":
			[
				"regions.namespace.declaration variable.other.object.property",
				"regions.namespace.declaration entity.name.variable.local"
			],
			"settings": { "foreground": "#716b6e" }
		},


	// Variables (support).

		{
			"name": "Variables (UnityEngine)",
			"scope": [ "regions.namespace.declaration support.variable.UnityEngine" ],
			"settings": { "foreground": "#716b6e" }
		},
		{
			"name": "Variables (UnityEditor)",
			"scope": [ "regions.namespace.declaration support.variable.UnityEditor" ],
			"settings": { "foreground": "#716b6e" }
		},
		{
			"name": "Variables (System)",
			"scope": [ "regions.namespace.declaration support.variable.System" ],
			"settings": { "foreground": "#716b6e" }
		}
		

	]
}